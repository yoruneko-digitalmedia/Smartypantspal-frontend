```html
<template>
  <!-- Main component template -->
  <div class="main">
    <!-- Naive UI space with vertical alignment and content class -->
    <n-space vertical class="content">
      <!-- Naive UI card component -->
      <n-card>
        <!-- Naive UI tabs component -->
        <n-tabs
          class="card-tabs"
          default-value="signin"
          size="large"
          animated
          pane-wrapper-style="margin: 0 -4px"
          pane-style="padding-left: 4px; padding-right: 4px; box-sizing: border-box;"
        >
          <!-- Login tab pane -->
          <n-tab-pane name="signin" tab="Login">
            <!-- Naive UI form component -->
            <n-form>
              <!-- Form item for username -->
              <n-form-item-row label="User name">
                <n-input v-model:value="username" type="text" placeholder="Username" />
              </n-form-item-row>
              <!-- Form item for password -->
              <n-form-item-row label="Password">
                <n-input v-model:value="password" type="password" placeholder="Password" />
              </n-form-item-row>
            </n-form>
            <!-- Button for handling login -->
            <n-button @click="handleLogin" type="primary" block secondary strong>
              Login
            </n-button>
          </n-tab-pane>
          <!-- Signup tab pane (commented out for simplicity) -->
          <!--
          <n-tab-pane name="signup" tab="Sign_up">
            <n-form>
              <n-form-item-row label="User name">
                <n-input v-model="username" />
              </n-form-item-row>
              <n-form-item-row label="Password">
                <n-input v-model="password" type="password" />
              </n-form-item-row>
              <n-form-item-row label="Repeat Password">
                <n-input v-model="repeatPassword" type="password" />
              </n-form-item-row>
              <n-form-item-row label="E-mail">
                <n-input v-model="email" />
              </n-form-item-row>
            </n-form>
            <n-button @click="handleSignUp" type="primary" block secondary strong>
              Sign up
            </n-button>
          </n-tab-pane>
          -->
        </n-tabs>
      </n-card>
    </n-space>
  </div>
</template>

<script setup>
// Import necessary functions and components from Vue
import { ref, onMounted } from 'vue';
import { useRouter } from 'vue-router';
import axios from 'axios';

// Define emitted events
// const emit = defineEmits(['login-success', 'themeChange']);
const emit = defineEmits(['themeChange', 'PermissionsUpdate']);
// Define reactive variables for user credentials
const username = ref('');
const password = ref('');
const repeatPassword = ref('');
const email = ref('');

// Get router instance
const router = useRouter();

// Function to handle login
const handleLogin = () => {
  axios.post('http://127.0.0.1/loginn', {
    email: username.value,
    password: password.value
  }, {
    withCredentials: true,
  })
    .then(response => {
      // console.log("!!!!!!!!!!!");
      // console.log("@@", response.data[2].authInfo.isboss);
      console.log('response.data[2].authInfo.isboss: ', response.data[2].authInfo.isboss)
      console.log('response: ', response.data[2].authInfo.name)
      emit('PermissionsUpdate', response.data[2].authInfo)
      router.push({ name: 'Home' }); //login success, dorect to /main/home
      // emit('login-success', response.data); //no use now
    })
    .catch(error => {
      console.error(error);
      message.error('something went wrong');
    });
};

// Function to handle signup (commented out for simplicity)
/*
const handleSignUp = () => {
  const token = 'your_token_from_backend';
  emit('login-success', token);
};
*/

// Lifecycle hook when component is mounted
onMounted(() => {
  // Add watcher for prefers-color-scheme
  const ChangeFlag = window.matchMedia('(prefers-color-scheme: dark)');
  //send ChangeFlag to APP.vue to decided weather change theme or not (initial darkTheme) this theme-change only work for Login.vue
  emit('themeChange', ChangeFlag.matches ? false : true); 
  // emit('PermissionsUpdate', {name:"!!!", isboss:false})
});
</script>

<style scoped>
/* Scoped CSS styles for the component */
.main {
  height: 100vh;
  width: 100vw;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: rgb(39, 94, 107); /* Adjust background color as needed */
}

.content {
  text-align: center;
  font-size: 32px; /* Adjust font size as needed */
}
</style>
```